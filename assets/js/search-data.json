{
  
    
        "post0": {
            "title": "Data Analysis of Movie Review using Natural Language Processing",
            "content": "import nltk nltk.download(&#39;movie_reviews&#39;) nltk.download(&#39;stopwords&#39;) nltk.download(&#39;averaged_perceptron_tagger&#39;) nltk.download(&#39;wordnet&#39;) . [nltk_data] Downloading package movie_reviews to /root/nltk_data... [nltk_data] Package movie_reviews is already up-to-date! [nltk_data] Downloading package stopwords to /root/nltk_data... [nltk_data] Package stopwords is already up-to-date! [nltk_data] Downloading package averaged_perceptron_tagger to [nltk_data] /root/nltk_data... [nltk_data] Package averaged_perceptron_tagger is already up-to- [nltk_data] date! [nltk_data] Downloading package wordnet to /root/nltk_data... [nltk_data] Unzipping corpora/wordnet.zip. . True . from nltk.corpus import movie_reviews documents=[] for category in movie_reviews.categories(): for fileid in movie_reviews.fileids(category): documents.append((movie_reviews.words(fileid), category)) . import random random.shuffle(documents) . from nltk.corpus import wordnet from nltk import pos_tag from nltk.corpus import stopwords import string from nltk.stem import WordNetLemmatizer lemmatizer=WordNetLemmatizer() stops=set(stopwords.words(&#39;english&#39;)) punctuations=list(string.punctuation) stops.update(punctuations) def get_simple_pos(tag): if tag.startswith(&#39;J&#39;): return wordnet.ADJ if tag.startswith(&#39;N&#39;): return wordnet.NOUN if tag.startswith(&#39;V&#39;): return wordnet.VERB if tag.startswith(&#39;R&#39;): return wordnet.ADV else: return wordnet.NOUN def clean_review(words): clean_words=[] for word in words: if word.lower() not in stops: pos=pos_tag([word])[0][1] clean_word=lemmatizer.lemmatize(word, pos=get_simple_pos(pos)) clean_words.append(clean_word.lower()) return clean_words . docs=[(clean_review(document), category) for document, category in documents] . all_words=[] for tup in docs: all_words+=tup[0] . import nltk freq=nltk.FreqDist(all_words) common=freq.most_common(3000) features=[i[0] for i in common] features . [&#39;film&#39;, &#39;movie&#39;, &#39;one&#39;, &#39;make&#39;, &#39;like&#39;, &#39;character&#39;, &#39;get&#39;, &#39;see&#39;, &#39;go&#39;, &#39;time&#39;, &#39;well&#39;, &#39;scene&#39;, &#39;even&#39;, &#39;good&#39;, &#39;story&#39;, &#39;take&#39;, &#39;would&#39;, &#39;much&#39;, &#39;come&#39;, &#39;also&#39;, &#39;bad&#39;, &#39;give&#39;, &#39;life&#39;, &#39;two&#39;, &#39;look&#39;, &#39;way&#39;, &#39;know&#39;, &#39;seem&#39;, &#39;first&#39;, &#39;end&#39;, &#39;--&#39;, &#39;year&#39;, &#39;work&#39;, &#39;thing&#39;, &#39;plot&#39;, &#39;say&#39;, &#39;play&#39;, &#39;really&#39;, &#39;little&#39;, &#39;show&#39;, &#39;people&#39;, &#39;could&#39;, &#39;man&#39;, &#39;star&#39;, &#39;love&#39;, &#39;never&#39;, &#39;try&#39;, &#39;great&#39;, &#39;director&#39;, &#39;best&#39;, &#39;performance&#39;, &#39;new&#39;, &#39;big&#39;, &#39;many&#39;, &#39;action&#39;, &#39;actor&#39;, &#39;want&#39;, &#39;u&#39;, &#39;watch&#39;, &#39;find&#39;, &#39;think&#39;, &#39;role&#39;, &#39;act&#39;, &#39;another&#39;, &#39;back&#39;, &#39;audience&#39;, &#39;something&#39;, &#39;world&#39;, &#39;turn&#39;, &#39;still&#39;, &#39;day&#39;, &#39;old&#39;, &#39;set&#39;, &#39;however&#39;, &#39;use&#39;, &#39;every&#39;, &#39;begin&#39;, &#39;though&#39;, &#39;guy&#39;, &#39;part&#39;, &#39;comedy&#39;, &#39;feel&#39;, &#39;cast&#39;, &#39;real&#39;, &#39;enough&#39;, &#39;around&#39;, &#39;point&#39;, &#39;interest&#39;, &#39;last&#39;, &#39;run&#39;, &#39;write&#39;, &#39;young&#39;, &#39;may&#39;, &#39;fact&#39;, &#39;name&#39;, &#39;long&#39;, &#39;funny&#39;, &#39;script&#39;, &#39;actually&#39;, &#39;right&#39;, &#39;minute&#39;, &#39;woman&#39;, &#39;effect&#39;, &#39;almost&#39;, &#39;lot&#39;, &#39;friend&#39;, &#39;nothing&#39;, &#39;john&#39;, &#39;place&#39;, &#39;although&#39;, &#39;screen&#39;, &#39;played&#39;, &#39;ever&#39;, &#39;start&#39;, &#39;moment&#39;, &#39;since&#39;, &#39;line&#39;, &#39;call&#39;, &#39;become&#39;, &#39;tell&#39;, &#39;lead&#39;, &#39;kill&#39;, &#39;original&#39;, &#39;help&#39;, &#39;high&#39;, &#39;family&#39;, &#39;without&#39;, &#39;three&#39;, &#39;problem&#39;, &#39;girl&#39;, &#39;picture&#39;, &#39;least&#39;, &#39;quite&#39;, &#39;sequence&#39;, &#39;need&#39;, &#39;away&#39;, &#39;course&#39;, &#39;laugh&#39;, &#39;might&#39;, &#39;far&#39;, &#39;fall&#39;, &#39;rather&#39;, &#39;must&#39;, &#39;anything&#39;, &#39;put&#39;, &#39;bit&#39;, &#39;include&#39;, &#39;child&#39;, &#39;job&#39;, &#39;american&#39;, &#39;yet&#39;, &#39;keep&#39;, &#39;follow&#39;, &#39;wife&#39;, &#39;alien&#39;, &#39;kind&#39;, &#39;hour&#39;, &#39;hard&#39;, &#39;always&#39;, &#39;reason&#39;, &#39;fun&#39;, &#39;head&#39;, &#39;feature&#39;, &#39;special&#39;, &#39;attempt&#39;, &#39;home&#39;, &#39;hand&#39;, &#39;hollywood&#39;, &#39;human&#39;, &#39;instead&#39;, &#39;lose&#39;, &#39;sense&#39;, &#39;move&#39;, &#39;war&#39;, &#39;mind&#39;, &#39;series&#39;, &#39;face&#39;, &#39;black&#39;, &#39;night&#39;, &#39;let&#39;, &#39;half&#39;, &#39;probably&#39;, &#39;kid&#39;, &#39;shot&#39;, &#39;along&#39;, &#39;men&#39;, &#39;everything&#39;, &#39;idea&#39;, &#39;pretty&#39;, &#39;becomes&#39;, &#39;direct&#39;, &#39;dialogue&#39;, &#39;sure&#39;, &#39;together&#39;, &#39;force&#39;, &#39;money&#39;, &#39;involve&#39;, &#39;believe&#39;, &#39;talk&#39;, &#39;father&#39;, &#39;save&#39;, &#39;whole&#39;, &#39;fight&#39;, &#39;horror&#39;, &#39;death&#39;, &#39;appear&#39;, &#39;boy&#39;, &#39;city&#39;, &#39;everyone&#39;, &#39;question&#39;, &#39;sex&#39;, &#39;music&#39;, &#39;less&#39;, &#39;do&#39;, &#39;release&#39;, &#39;second&#39;, &#39;couple&#39;, &#39;thought&#39;, &#39;brother&#39;, &#39;eye&#39;, &#39;perhaps&#39;, &#39;small&#39;, &#39;case&#39;, &#39;next&#39;, &#39;especially&#39;, &#39;expect&#39;, &#39;happen&#39;, &#39;meet&#39;, &#39;relationship&#39;, &#39;10&#39;, &#39;word&#39;, &#39;mother&#39;, &#39;base&#39;, &#39;create&#39;, &#39;completely&#39;, &#39;care&#39;, &#39;rest&#39;, &#39;2&#39;, &#39;whose&#39;, &#39;evil&#39;, &#39;writer&#39;, &#39;change&#39;, &#39;james&#39;, &#39;different&#39;, &#39;sound&#39;, &#39;simply&#39;, &#39;mean&#39;, &#39;book&#39;, &#39;mr&#39;, &#39;anyone&#39;, &#39;joke&#39;, &#39;school&#39;, &#39;michael&#39;, &#39;late&#39;, &#39;review&#39;, &#39;several&#39;, &#39;top&#39;, &#39;dead&#39;, &#39;humor&#39;, &#39;suppose&#39;, &#39;live&#39;, &#39;lack&#39;, &#39;left&#39;, &#39;add&#39;, &#39;true&#39;, &#39;matter&#39;, &#39;town&#39;, &#39;entire&#39;, &#39;hit&#39;, &#39;group&#39;, &#39;found&#39;, &#39;fan&#39;, &#39;comic&#39;, &#39;soon&#39;, &#39;house&#39;, &#39;someone&#39;, &#39;main&#39;, &#39;entertain&#39;, &#39;tv&#39;, &#39;game&#39;, &#39;side&#39;, &#39;leave&#39;, &#39;wrong&#39;, &#39;present&#39;, &#39;wonder&#39;, &#39;david&#39;, &#39;else&#39;, &#39;either&#39;, &#39;element&#39;, &#39;full&#39;, &#39;final&#39;, &#39;stop&#39;, &#39;unfortunately&#39;, &#39;later&#39;, &#39;viewer&#39;, &#39;murder&#39;, &#39;car&#39;, &#39;open&#39;, &#39;style&#39;, &#39;enjoy&#39;, &#39;camera&#39;, &#39;support&#39;, &#39;return&#39;, &#39;credit&#39;, &#39;robert&#39;, &#39;often&#39;, &#39;provide&#39;, &#39;power&#39;, &#39;die&#39;, &#39;deal&#39;, &#39;son&#39;, &#39;hero&#39;, &#39;behind&#39;, &#39;person&#39;, &#39;certainly&#39;, &#39;title&#39;, &#39;result&#39;, &#39;team&#39;, &#39;scream&#39;, &#39;despite&#39;, &#39;perfect&#39;, &#39;finally&#39;, &#39;video&#39;, &#39;order&#39;, &#39;nice&#39;, &#39;killer&#39;, &#39;stand&#39;, &#39;note&#39;, &#39;miss&#39;, &#39;maybe&#39;, &#39;piece&#39;, &#39;summer&#39;, &#39;past&#39;, &#39;able&#39;, &#39;fine&#39;, &#39;view&#39;, &#39;consider&#39;, &#39;classic&#39;, &#39;strong&#39;, &#39;example&#39;, &#39;voice&#39;, &#39;daughter&#39;, &#39;hope&#39;, &#39;situation&#39;, &#39;theater&#39;, &#39;production&#39;, &#39;sort&#39;, &#39;thriller&#39;, &#39;close&#39;, &#39;event&#39;, &#39;dog&#39;, &#39;white&#39;, &#39;kevin&#39;, &#39;talent&#39;, &#39;break&#39;, &#39;drama&#39;, &#39;joe&#39;, &#39;body&#39;, &#39;worth&#39;, &#39;earth&#39;, &#39;heart&#39;, &#39;bring&#39;, &#39;short&#39;, &#39;cut&#39;, &#39;version&#39;, &#39;level&#39;, &#39;self&#39;, &#39;dark&#39;, &#39;room&#39;, &#39;dream&#39;, &#39;cop&#39;, &#39;early&#39;, &#39;opening&#39;, &#39;nearly&#39;, &#39;upon&#39;, &#39;screenplay&#39;, &#39;light&#39;, &#39;experience&#39;, &#39;ask&#39;, &#39;violence&#39;, &#39;major&#39;, &#39;art&#39;, &#39;age&#39;, &#39;throughout&#39;, &#39;figure&#39;, &#39;ship&#39;, &#39;direction&#39;, &#39;beautiful&#39;, &#39;computer&#39;, &#39;jack&#39;, &#39;exactly&#39;, &#39;realize&#39;, &#39;obvious&#39;, &#39;state&#39;, &#39;genre&#39;, &#39;disney&#39;, &#39;already&#39;, &#39;plan&#39;, &#39;others&#39;, &#39;number&#39;, &#39;fill&#39;, &#39;guess&#39;, &#39;wait&#39;, &#39;space&#39;, &#39;waste&#39;, &#39;five&#39;, &#39;deep&#39;, &#39;simple&#39;, &#39;offer&#39;, &#39;form&#39;, &#39;four&#39;, &#39;jackie&#39;, &#39;surprise&#39;, &#39;twist&#39;, &#39;learn&#39;, &#39;king&#39;, &#39;walk&#39;, &#39;touch&#39;, &#39;pull&#39;, &#39;chase&#39;, &#39;career&#39;, &#39;flick&#39;, &#39;sometimes&#39;, &#39;rise&#39;, &#39;oscar&#39;, &#39;novel&#39;, &#39;member&#39;, &#39;hold&#39;, &#39;truly&#39;, &#39;filmmaker&#39;, &#39;battle&#39;, &#39;1&#39;, &#39;tom&#39;, &#39;boring&#39;, &#39;husband&#39;, &#39;easy&#39;, &#39;pace&#39;, &#39;drug&#39;, &#39;lee&#39;, &#39;god&#39;, &#39;peter&#39;, &#39;sequel&#39;, &#39;type&#39;, &#39;york&#39;, &#39;planet&#39;, &#39;fiction&#39;, &#39;charm&#39;, &#39;win&#39;, &#39;carry&#39;, &#39;parent&#39;, &#39;happens&#39;, &#39;yes&#39;, &#39;saw&#39;, &#39;song&#39;, &#39;score&#39;, &#39;remember&#39;, &#39;tale&#39;, &#39;quickly&#39;, &#39;stupid&#39;, &#39;romantic&#39;, &#39;possible&#39;, &#39;gun&#39;, &#39;villain&#39;, &#39;chance&#39;, &#39;material&#39;, &#39;manages&#39;, &#39;extremely&#39;, &#39;mostly&#39;, &#39;de&#39;, &#39;future&#39;, &#39;attention&#39;, &#39;project&#39;, &#39;single&#39;, &#39;particularly&#39;, &#39;escape&#39;, &#39;focus&#39;, &#39;paul&#39;, &#39;quality&#39;, &#39;mention&#39;, &#39;police&#39;, &#39;none&#39;, &#39;co&#39;, &#39;van&#39;, &#39;stay&#39;, &#39;eventually&#39;, &#39;decide&#39;, &#39;crime&#39;, &#39;wild&#39;, &#39;hell&#39;, &#39;emotional&#39;, &#39;science&#39;, &#39;image&#39;, &#39;smith&#39;, &#39;shoot&#39;, &#39;large&#39;, &#39;sit&#39;, &#39;dr&#39;, &#39;girlfriend&#39;, &#39;pay&#39;, &#39;living&#39;, &#39;detail&#39;, &#39;steal&#39;, &#39;rock&#39;, &#39;drive&#39;, &#39;george&#39;, &#39;success&#39;, &#39;low&#39;, &#39;actress&#39;, &#39;alone&#39;, &#39;theme&#39;, &#39;obviously&#39;, &#39;cover&#39;, &#39;television&#39;, &#39;million&#39;, &#39;within&#39;, &#39;usually&#39;, &#39;water&#39;, &#39;among&#39;, &#39;cause&#39;, &#39;premise&#39;, &#39;middle&#39;, &#39;read&#39;, &#39;secret&#39;, &#39;aspect&#39;, &#39;complete&#39;, &#39;3&#39;, &#39;understand&#39;, &#39;flaw&#39;, &#39;across&#39;, &#39;subject&#39;, &#39;chris&#39;, &#39;except&#39;, &#39;mission&#39;, &#39;poor&#39;, &#39;history&#39;, &#39;slow&#39;, &#39;reality&#39;, &#39;local&#39;, &#39;wonderful&#39;, &#39;whether&#39;, &#39;serious&#39;, &#39;amaze&#39;, &#39;oh&#39;, &#39;agent&#39;, &#39;crew&#39;, &#39;law&#39;, &#39;important&#39;, &#39;effort&#39;, &#39;motion&#39;, &#39;happy&#39;, &#39;mark&#39;, &#39;explain&#39;, &#39;impressive&#39;, &#39;studio&#39;, &#39;near&#39;, &#39;america&#39;, &#39;told&#39;, &#39;stuff&#39;, &#39;office&#39;, &#39;entertainment&#39;, &#39;street&#39;, &#39;cool&#39;, &#39;robin&#39;, &#39;basically&#39;, &#39;recent&#39;, &#39;produce&#39;, &#39;easily&#39;, &#39;ryan&#39;, &#39;apparently&#39;, &#39;message&#39;, &#39;vampire&#39;, &#39;wish&#39;, &#39;williams&#39;, &#39;screenwriter&#39;, &#39;party&#39;, &#39;mystery&#39;, &#39;attack&#39;, &#39;somehow&#39;, &#39;blood&#39;, &#39;william&#39;, &#39;fear&#39;, &#39;bill&#39;, &#39;lie&#39;, &#39;fast&#39;, &#39;jones&#39;, &#39;control&#39;, &#39;doubt&#39;, &#39;fire&#39;, &#39;batman&#39;, &#39;brings&#39;, &#39;suspense&#39;, &#39;straight&#39;, &#39;producer&#39;, &#39;hilarious&#39;, &#39;difficult&#39;, &#39;red&#39;, &#39;ben&#39;, &#39;ago&#39;, &#39;appeal&#39;, &#39;certain&#39;, &#39;country&#39;, &#39;romance&#39;, &#39;approach&#39;, &#39;popular&#39;, &#39;company&#39;, &#39;presence&#39;, &#39;business&#39;, &#39;due&#39;, &#39;effective&#39;, &#39;critic&#39;, &#39;confuse&#39;, &#39;adult&#39;, &#39;fly&#39;, &#39;throw&#39;, &#39;answer&#39;, &#39;annoy&#39;, &#39;smart&#39;, &#39;teen&#39;, &#39;fail&#39;, &#39;trouble&#39;, &#39;third&#39;, &#39;dramatic&#39;, &#39;general&#39;, &#39;budget&#39;, &#39;class&#39;, &#39;sexual&#39;, &#39;date&#39;, &#39;discover&#39;, &#39;clear&#39;, &#39;speak&#39;, &#39;rich&#39;, &#39;surprisingly&#39;, &#39;anyway&#39;, &#39;us&#39;, &#39;personal&#39;, &#39;4&#39;, &#39;emotion&#39;, &#39;decides&#39;, &#39;share&#39;, &#39;cross&#39;, &#39;somewhat&#39;, &#39;rat&#39;, &#39;harry&#39;, &#39;ability&#39;, &#39;choice&#39;, &#39;successful&#39;, &#39;prison&#39;, &#39;absolutely&#39;, &#39;sister&#39;, &#39;cinema&#39;, &#39;former&#39;, &#39;excite&#39;, &#39;jim&#39;, &#39;previous&#39;, &#39;similar&#39;, &#39;allow&#39;, &#39;strange&#39;, &#39;student&#39;, &#39;excellent&#39;, &#39;familiar&#39;, &#39;leaf&#39;, &#39;intelligent&#39;, &#39;rule&#39;, &#39;bob&#39;, &#39;predictable&#39;, &#39;dance&#39;, &#39;towards&#39;, &#39;giant&#39;, &#39;powerful&#39;, &#39;beyond&#39;, &#39;b&#39;, &#39;shock&#39;, &#39;box&#39;, &#39;animate&#39;, &#39;visual&#39;, &#39;r&#39;, &#39;victim&#39;, &#39;trailer&#39;, &#39;nature&#39;, &#39;la&#39;, &#39;sam&#39;, &#39;deliver&#39;, &#39;tone&#39;, &#39;clever&#39;, &#39;blue&#39;, &#39;catch&#39;, &#39;definitely&#39;, &#39;usual&#39;, &#39;martin&#39;, &#39;murphy&#39;, &#39;master&#39;, &#39;felt&#39;, &#39;brilliant&#39;, &#39;scary&#39;, &#39;wedding&#39;, &#39;suspect&#39;, &#39;manage&#39;, &#39;stone&#39;, &#39;capture&#39;, &#39;musical&#39;, &#39;solid&#39;, &#39;reveal&#39;, &#39;appearance&#39;, &#39;bunch&#39;, &#39;mess&#39;, &#39;rating&#39;, &#39;favorite&#39;, &#39;pick&#39;, &#39;land&#39;, &#39;travel&#39;, &#39;handle&#39;, &#39;reach&#39;, &#39;free&#39;, &#39;grow&#39;, &#39;potential&#39;, &#39;seriously&#39;, &#39;treat&#39;, &#39;track&#39;, &#39;wear&#39;, &#39;huge&#39;, &#39;hunt&#39;, &#39;search&#39;, &#39;continue&#39;, &#39;week&#39;, &#39;amount&#39;, &#39;married&#39;, &#39;sweet&#39;, &#39;unlike&#39;, &#39;l&#39;, &#39;perfectly&#39;, &#39;join&#39;, &#39;issue&#39;, &#39;non&#39;, &#39;park&#39;, &#39;ex&#39;, &#39;hate&#39;, &#39;bond&#39;, &#39;adventure&#39;, &#39;enjoyable&#39;, &#39;scott&#39;, &#39;strike&#39;, &#39;e&#39;, &#39;decent&#39;, &#39;likely&#39;, &#39;ten&#39;, &#39;immediately&#39;, &#39;frank&#39;, &#39;heard&#39;, &#39;truman&#39;, &#39;depth&#39;, &#39;cameron&#39;, &#39;private&#39;, &#39;door&#39;, &#39;monster&#39;, &#39;bruce&#39;, &#39;overall&#39;, &#39;carter&#39;, &#39;inside&#39;, &#39;fails&#39;, &#39;impossible&#39;, &#39;richard&#39;, &#39;cold&#39;, &#39;race&#39;, &#39;truth&#39;, &#39;toy&#39;, &#39;trek&#39;, &#39;merely&#39;, &#39;particular&#39;, &#39;step&#39;, &#39;purpose&#39;, &#39;air&#39;, &#39;prove&#39;, &#39;color&#39;, &#39;gag&#39;, &#39;mar&#39;, &#39;sign&#39;, &#39;struggle&#39;, &#39;sight&#39;, &#39;neither&#39;, &#39;design&#39;, &#39;drop&#39;, &#39;ultimately&#39;, &#39;modern&#39;, &#39;thrill&#39;, &#39;personality&#39;, &#39;list&#39;, &#39;brought&#39;, &#39;spirit&#39;, &#39;pop&#39;, &#39;club&#39;, &#39;tim&#39;, &#39;cliche&#39;, &#39;term&#39;, &#39;otherwise&#39;, &#39;society&#39;, &#39;5&#39;, &#39;wood&#39;, &#39;allen&#39;, &#39;key&#39;, &#39;dumb&#39;, &#39;player&#39;, &#39;fashion&#39;, &#39;government&#39;, &#39;serve&#39;, &#39;talented&#39;, &#39;west&#39;, &#39;succeed&#39;, &#39;opportunity&#39;, &#39;amuse&#39;, &#39;various&#39;, &#39;political&#39;, &#39;mouth&#39;, &#39;angel&#39;, &#39;army&#39;, &#39;soundtrack&#39;, &#39;development&#39;, &#39;sell&#39;, &#39;female&#39;, &#39;raise&#39;, &#39;english&#39;, &#39;silly&#39;, &#39;haunt&#39;, &#39;detective&#39;, &#39;slightly&#39;, &#39;steve&#39;, &#39;hank&#39;, &#39;train&#39;, &#39;month&#39;, &#39;introduce&#39;, &#39;roll&#39;, &#39;kiss&#39;, &#39;spend&#39;, &#39;tension&#39;, &#39;lover&#39;, &#39;require&#39;, &#39;imagine&#39;, &#39;compare&#39;, &#39;eddie&#39;, &#39;grace&#39;, &#39;foot&#39;, &#39;disaster&#39;, &#39;baby&#39;, &#39;today&#39;, &#39;creature&#39;, &#39;earlier&#39;, &#39;chan&#39;, &#39;90&#39;, &#39;six&#39;, &#39;hill&#39;, &#39;memorable&#39;, &#39;heavy&#39;, &#39;award&#39;, &#39;max&#39;, &#39;cannot&#39;, &#39;background&#39;, &#39;rescue&#39;, &#39;episode&#39;, &#39;ground&#39;, &#39;totally&#39;, &#39;notice&#39;, &#39;leader&#39;, &#39;soldier&#39;, &#39;respect&#39;, &#39;front&#39;, &#39;woody&#39;, &#39;fi&#39;, &#39;ape&#39;, &#39;engage&#39;, &#39;machine&#39;, &#39;animation&#39;, &#39;arm&#39;, &#39;hop&#39;, &#39;sci&#39;, &#39;edit&#39;, &#39;simon&#39;, &#39;doctor&#39;, &#39;costume&#39;, &#39;ride&#39;, &#39;mary&#39;, &#39;terrible&#39;, &#39;constantly&#39;, &#39;steven&#39;, &#39;entirely&#39;, &#39;actual&#39;, &#39;impact&#39;, &#39;british&#39;, &#39;queen&#39;, &#39;minor&#39;, &#39;suffer&#39;, &#39;promise&#39;, &#39;convincing&#39;, &#39;standard&#39;, &#39;fantasy&#39;, &#39;brief&#39;, &#39;menace&#39;, &#39;animal&#39;, &#39;atmosphere&#39;, &#39;nick&#39;, &#39;quick&#39;, &#39;cinematography&#39;, &#39;ridiculous&#39;, &#39;officer&#39;, &#39;typical&#39;, &#39;rush&#39;, &#39;island&#39;, &#39;spent&#39;, &#39;8&#39;, &#39;violent&#39;, &#39;double&#39;, &#39;partner&#39;, &#39;subtle&#39;, &#39;trip&#39;, &#39;bug&#39;, &#39;adam&#39;, &#39;road&#39;, &#39;building&#39;, &#39;grant&#39;, &#39;cameo&#39;, &#39;fairly&#39;, &#39;seven&#39;, &#39;dollar&#39;, &#39;inspire&#39;, &#39;concept&#39;, &#39;cheap&#39;, &#39;dress&#39;, &#39;beauty&#39;, &#39;suddenly&#39;, &#39;willis&#39;, &#39;whatever&#39;, &#39;bore&#39;, &#39;remain&#39;, &#39;highly&#39;, &#39;store&#39;, &#39;complex&#39;, &#39;college&#39;, &#39;president&#39;, &#39;dull&#39;, &#39;flat&#39;, &#39;indeed&#39;, &#39;pair&#39;, &#39;suit&#39;, &#39;recommend&#39;, &#39;ii&#39;, &#39;basic&#39;, &#39;mike&#39;, &#39;cute&#39;, &#39;godzilla&#39;, &#39;outside&#39;, &#39;brain&#39;, &#39;kick&#39;, &#39;frame&#39;, &#39;recently&#39;, &#39;plenty&#39;, &#39;titanic&#39;, &#39;cinematic&#39;, &#39;meanwhile&#39;, &#39;climax&#39;, &#39;clearly&#39;, &#39;x&#39;, &#39;hear&#39;, &#39;intrigue&#39;, &#39;awful&#39;, &#39;buddy&#39;, &#39;longer&#39;, &#39;prof&#39;, &#39;forget&#39;, &#39;tough&#39;, &#39;common&#39;, &#39;chemistry&#39;, &#39;century&#39;, &#39;sean&#39;, &#39;period&#39;, &#39;realistic&#39;, &#39;believable&#39;, &#39;admit&#39;, &#39;protagonist&#39;, &#39;conclusion&#39;, &#39;scientist&#39;, &#39;lawyer&#39;, &#39;language&#39;, &#39;possibly&#39;, &#39;encounter&#39;, &#39;band&#39;, &#39;male&#39;, &#39;french&#39;, &#39;aside&#39;, &#39;twenty&#39;, &#39;sing&#39;, &#39;camp&#39;, &#39;hang&#39;, &#39;carrey&#39;, &#39;brown&#39;, &#39;jerry&#39;, &#39;thin&#39;, &#39;somewhere&#39;, &#39;slowly&#39;, &#39;center&#39;, &#39;hot&#39;, &#39;witch&#39;, &#39;system&#39;, ...] . training_documents=docs[0:1500] testing_documents=docs[1500:] . def get_feature_dict(words): current_features={} words_set=set(words) for w in features: current_features[w]=w in words_set return current_features . training_data=[(get_feature_dict(doc), category)for doc, category in training_documents] . testing_data=[(get_feature_dict(doc), category)for doc, category in testing_documents] . from nltk import NaiveBayesClassifier clf=NaiveBayesClassifier.train(training_data) . nltk.classify.accuracy(clf, testing_data) . 0.834 . clf.show_most_informative_features(500) . Most Informative Features outstanding = True pos : neg = 10.3 : 1.0 uninspired = True neg : pos = 9.9 : 1.0 seagal = True neg : pos = 8.7 : 1.0 ludicrous = True neg : pos = 8.2 : 1.0 stupidity = True neg : pos = 7.9 : 1.0 breathtaking = True pos : neg = 6.9 : 1.0 idiotic = True neg : pos = 6.7 : 1.0 castle = True pos : neg = 6.7 : 1.0 bottle = True neg : pos = 6.5 : 1.0 damon = True pos : neg = 6.4 : 1.0 mulan = True pos : neg = 6.0 : 1.0 poker = True pos : neg = 6.0 : 1.0 turkey = True neg : pos = 5.9 : 1.0 wonderfully = True pos : neg = 5.9 : 1.0 lame = True neg : pos = 5.9 : 1.0 awful = True neg : pos = 5.8 : 1.0 sat = True neg : pos = 5.5 : 1.0 belief = True pos : neg = 5.5 : 1.0 poorly = True neg : pos = 5.4 : 1.0 anger = True pos : neg = 5.3 : 1.0 welles = True neg : pos = 5.2 : 1.0 religion = True pos : neg = 5.0 : 1.0 inane = True neg : pos = 4.9 : 1.0 waste = True neg : pos = 4.8 : 1.0 emperor = True pos : neg = 4.8 : 1.0 era = True pos : neg = 4.8 : 1.0 stupid = True neg : pos = 4.7 : 1.0 random = True neg : pos = 4.7 : 1.0 idiot = True neg : pos = 4.7 : 1.0 alicia = True neg : pos = 4.6 : 1.0 ridiculous = True neg : pos = 4.6 : 1.0 fantastic = True pos : neg = 4.6 : 1.0 chuckle = True neg : pos = 4.5 : 1.0 whatsoever = True neg : pos = 4.5 : 1.0 beautifully = True pos : neg = 4.5 : 1.0 lifeless = True neg : pos = 4.4 : 1.0 shine = True pos : neg = 4.4 : 1.0 delight = True pos : neg = 4.4 : 1.0 affect = True pos : neg = 4.3 : 1.0 unfunny = True neg : pos = 4.3 : 1.0 pointless = True neg : pos = 4.3 : 1.0 painfully = True neg : pos = 4.3 : 1.0 ordinary = True pos : neg = 4.2 : 1.0 dull = True neg : pos = 4.2 : 1.0 traditional = True pos : neg = 4.1 : 1.0 garbage = True neg : pos = 4.1 : 1.0 flawless = True pos : neg = 4.1 : 1.0 bland = True neg : pos = 4.1 : 1.0 freddie = True neg : pos = 4.0 : 1.0 memorable = True pos : neg = 4.0 : 1.0 jolie = True neg : pos = 4.0 : 1.0 zeta = True neg : pos = 4.0 : 1.0 martha = True neg : pos = 4.0 : 1.0 jesus = True pos : neg = 3.9 : 1.0 allows = True pos : neg = 3.8 : 1.0 sinise = True neg : pos = 3.7 : 1.0 prinze = True neg : pos = 3.7 : 1.0 insult = True neg : pos = 3.7 : 1.0 ambitious = True pos : neg = 3.7 : 1.0 superb = True pos : neg = 3.6 : 1.0 rick = True neg : pos = 3.6 : 1.0 german = True pos : neg = 3.6 : 1.0 embarrass = True neg : pos = 3.6 : 1.0 balance = True pos : neg = 3.6 : 1.0 badly = True neg : pos = 3.5 : 1.0 terrible = True neg : pos = 3.5 : 1.0 felix = True pos : neg = 3.5 : 1.0 flynt = True pos : neg = 3.5 : 1.0 gas = True pos : neg = 3.5 : 1.0 ideal = True pos : neg = 3.5 : 1.0 respectively = True pos : neg = 3.4 : 1.0 initially = True pos : neg = 3.4 : 1.0 terrific = True pos : neg = 3.4 : 1.0 companion = True pos : neg = 3.4 : 1.0 comfort = True pos : neg = 3.4 : 1.0 anywhere = True neg : pos = 3.4 : 1.0 grip = True pos : neg = 3.4 : 1.0 excellent = True pos : neg = 3.4 : 1.0 affection = True pos : neg = 3.3 : 1.0 delightful = True pos : neg = 3.3 : 1.0 potentially = True neg : pos = 3.3 : 1.0 anna = True pos : neg = 3.3 : 1.0 parker = True pos : neg = 3.3 : 1.0 scorsese = True pos : neg = 3.3 : 1.0 promising = True neg : pos = 3.2 : 1.0 crowe = True pos : neg = 3.2 : 1.0 harris = True pos : neg = 3.2 : 1.0 boring = True neg : pos = 3.2 : 1.0 stun = True pos : neg = 3.2 : 1.0 mess = True neg : pos = 3.2 : 1.0 politics = True pos : neg = 3.2 : 1.0 schwarzenegger = True neg : pos = 3.1 : 1.0 remotely = True neg : pos = 3.1 : 1.0 bother = True neg : pos = 3.1 : 1.0 obi = True pos : neg = 3.1 : 1.0 darth = True pos : neg = 3.1 : 1.0 gradually = True pos : neg = 3.1 : 1.0 portrait = True pos : neg = 3.1 : 1.0 natural = True pos : neg = 3.1 : 1.0 lonely = True pos : neg = 3.1 : 1.0 perfectly = True pos : neg = 3.1 : 1.0 subtle = True pos : neg = 3.1 : 1.0 braveheart = True pos : neg = 3.1 : 1.0 shall = True pos : neg = 3.1 : 1.0 mature = True pos : neg = 3.1 : 1.0 dumb = True neg : pos = 3.0 : 1.0 uninteresting = True neg : pos = 3.0 : 1.0 noir = True pos : neg = 3.0 : 1.0 snake = True neg : pos = 3.0 : 1.0 inept = True neg : pos = 3.0 : 1.0 appropriately = True pos : neg = 3.0 : 1.0 detailed = True pos : neg = 3.0 : 1.0 consequence = True pos : neg = 3.0 : 1.0 clich = True neg : pos = 3.0 : 1.0 involves = True neg : pos = 3.0 : 1.0 laughable = True neg : pos = 3.0 : 1.0 innocence = True pos : neg = 3.0 : 1.0 italian = True pos : neg = 3.0 : 1.0 tribe = True neg : pos = 2.9 : 1.0 shark = True neg : pos = 2.9 : 1.0 rare = True pos : neg = 2.9 : 1.0 offensive = True neg : pos = 2.9 : 1.0 refresh = True pos : neg = 2.9 : 1.0 freedom = True pos : neg = 2.9 : 1.0 luckily = True pos : neg = 2.9 : 1.0 dillon = True pos : neg = 2.9 : 1.0 tucker = True pos : neg = 2.9 : 1.0 anakin = True pos : neg = 2.9 : 1.0 alice = True pos : neg = 2.9 : 1.0 philosophy = True pos : neg = 2.9 : 1.0 foster = True pos : neg = 2.9 : 1.0 angela = True pos : neg = 2.9 : 1.0 unusual = True pos : neg = 2.9 : 1.0 loyal = True pos : neg = 2.9 : 1.0 nomination = True pos : neg = 2.9 : 1.0 slide = True pos : neg = 2.9 : 1.0 pattern = True pos : neg = 2.9 : 1.0 sidney = True pos : neg = 2.9 : 1.0 fargo = True pos : neg = 2.9 : 1.0 li = True neg : pos = 2.8 : 1.0 patch = True neg : pos = 2.8 : 1.0 chick = True neg : pos = 2.8 : 1.0 frankly = True neg : pos = 2.8 : 1.0 portrayal = True pos : neg = 2.8 : 1.0 tedious = True neg : pos = 2.8 : 1.0 friendship = True pos : neg = 2.8 : 1.0 damme = True neg : pos = 2.8 : 1.0 depict = True pos : neg = 2.8 : 1.0 citizen = True pos : neg = 2.8 : 1.0 triumph = True pos : neg = 2.8 : 1.0 terribly = True neg : pos = 2.7 : 1.0 contrast = True pos : neg = 2.7 : 1.0 crap = True neg : pos = 2.7 : 1.0 dread = True pos : neg = 2.7 : 1.0 antic = True neg : pos = 2.7 : 1.0 clone = True neg : pos = 2.7 : 1.0 painful = True neg : pos = 2.7 : 1.0 training = True pos : neg = 2.7 : 1.0 niro = True pos : neg = 2.7 : 1.0 happiness = True pos : neg = 2.7 : 1.0 justice = True pos : neg = 2.7 : 1.0 subtitle = True pos : neg = 2.7 : 1.0 banderas = True neg : pos = 2.7 : 1.0 sutherland = True neg : pos = 2.7 : 1.0 golden = True pos : neg = 2.7 : 1.0 france = True pos : neg = 2.7 : 1.0 rip = True neg : pos = 2.7 : 1.0 randy = True neg : pos = 2.7 : 1.0 inventive = True pos : neg = 2.7 : 1.0 lethal = True neg : pos = 2.7 : 1.0 yell = True neg : pos = 2.6 : 1.0 jedi = True pos : neg = 2.6 : 1.0 liam = True pos : neg = 2.6 : 1.0 mass = True pos : neg = 2.6 : 1.0 gem = True pos : neg = 2.6 : 1.0 normal = True pos : neg = 2.6 : 1.0 overall = True pos : neg = 2.6 : 1.0 effective = True pos : neg = 2.6 : 1.0 rent = True neg : pos = 2.6 : 1.0 designer = True pos : neg = 2.6 : 1.0 drunk = True neg : pos = 2.6 : 1.0 greg = True neg : pos = 2.6 : 1.0 massive = True neg : pos = 2.6 : 1.0 nonsense = True neg : pos = 2.6 : 1.0 porn = True neg : pos = 2.6 : 1.0 satisfy = True pos : neg = 2.6 : 1.0 dicaprio = True pos : neg = 2.6 : 1.0 ace = True neg : pos = 2.6 : 1.0 sandler = True neg : pos = 2.6 : 1.0 fascinate = True pos : neg = 2.6 : 1.0 influence = True pos : neg = 2.6 : 1.0 epic = True pos : neg = 2.6 : 1.0 regard = True pos : neg = 2.5 : 1.0 extraordinary = True pos : neg = 2.5 : 1.0 screw = True neg : pos = 2.5 : 1.0 upset = True pos : neg = 2.5 : 1.0 creation = True pos : neg = 2.5 : 1.0 trilogy = True pos : neg = 2.5 : 1.0 midnight = True pos : neg = 2.5 : 1.0 stiller = True pos : neg = 2.5 : 1.0 highly = True pos : neg = 2.5 : 1.0 pulp = True pos : neg = 2.5 : 1.0 tyler = True neg : pos = 2.5 : 1.0 admire = True pos : neg = 2.5 : 1.0 intensity = True pos : neg = 2.5 : 1.0 fails = True neg : pos = 2.5 : 1.0 portrayed = True pos : neg = 2.5 : 1.0 somebody = True neg : pos = 2.5 : 1.0 suck = True neg : pos = 2.5 : 1.0 malkovich = True pos : neg = 2.5 : 1.0 strength = True pos : neg = 2.5 : 1.0 briefly = True pos : neg = 2.5 : 1.0 upper = True pos : neg = 2.5 : 1.0 pleasant = True pos : neg = 2.5 : 1.0 endear = True pos : neg = 2.5 : 1.0 saturday = True neg : pos = 2.4 : 1.0 zero = True neg : pos = 2.4 : 1.0 bury = True neg : pos = 2.4 : 1.0 jungle = True neg : pos = 2.4 : 1.0 anaconda = True neg : pos = 2.4 : 1.0 54 = True neg : pos = 2.4 : 1.0 stalk = True neg : pos = 2.4 : 1.0 political = True pos : neg = 2.4 : 1.0 remarkable = True pos : neg = 2.4 : 1.0 schindler = True pos : neg = 2.4 : 1.0 suppose = True neg : pos = 2.4 : 1.0 sadly = True neg : pos = 2.4 : 1.0 perfect = True pos : neg = 2.4 : 1.0 andy = True pos : neg = 2.4 : 1.0 uncle = True pos : neg = 2.4 : 1.0 october = True pos : neg = 2.4 : 1.0 mine = True neg : pos = 2.4 : 1.0 deserves = True pos : neg = 2.4 : 1.0 famous = True pos : neg = 2.4 : 1.0 phenomenon = True pos : neg = 2.4 : 1.0 likeable = True pos : neg = 2.4 : 1.0 snow = True pos : neg = 2.4 : 1.0 eve = True neg : pos = 2.4 : 1.0 acclaim = True pos : neg = 2.4 : 1.0 neighbor = True pos : neg = 2.4 : 1.0 beach = True pos : neg = 2.4 : 1.0 nevertheless = True pos : neg = 2.4 : 1.0 slip = True pos : neg = 2.4 : 1.0 wonderful = True pos : neg = 2.4 : 1.0 masterpiece = True pos : neg = 2.4 : 1.0 reality = True pos : neg = 2.4 : 1.0 warren = True neg : pos = 2.4 : 1.0 period = True pos : neg = 2.4 : 1.0 realistic = True pos : neg = 2.4 : 1.0 command = True pos : neg = 2.4 : 1.0 notch = True pos : neg = 2.4 : 1.0 north = True pos : neg = 2.4 : 1.0 laura = True pos : neg = 2.4 : 1.0 secretly = True pos : neg = 2.4 : 1.0 study = True pos : neg = 2.4 : 1.0 stereotype = True neg : pos = 2.4 : 1.0 gary = True neg : pos = 2.4 : 1.0 sentimental = True pos : neg = 2.4 : 1.0 criticism = True pos : neg = 2.4 : 1.0 lucas = True pos : neg = 2.4 : 1.0 medical = True pos : neg = 2.4 : 1.0 creates = True pos : neg = 2.3 : 1.0 generic = True neg : pos = 2.3 : 1.0 julie = True neg : pos = 2.3 : 1.0 incredible = True pos : neg = 2.3 : 1.0 kim = True neg : pos = 2.3 : 1.0 wire = True neg : pos = 2.3 : 1.0 mill = True pos : neg = 2.3 : 1.0 iron = True pos : neg = 2.3 : 1.0 harrison = True pos : neg = 2.3 : 1.0 solid = True pos : neg = 2.3 : 1.0 breast = True neg : pos = 2.3 : 1.0 visuals = True pos : neg = 2.3 : 1.0 mood = True pos : neg = 2.3 : 1.0 b = True neg : pos = 2.3 : 1.0 snipe = True neg : pos = 2.3 : 1.0 comet = True neg : pos = 2.3 : 1.0 superficial = True neg : pos = 2.3 : 1.0 smoke = True neg : pos = 2.3 : 1.0 demonstrates = True pos : neg = 2.3 : 1.0 bore = True neg : pos = 2.3 : 1.0 hokey = True neg : pos = 2.3 : 1.0 equally = True pos : neg = 2.3 : 1.0 revelation = True pos : neg = 2.3 : 1.0 spielberg = True pos : neg = 2.3 : 1.0 social = True pos : neg = 2.3 : 1.0 tony = True pos : neg = 2.3 : 1.0 vehicle = True neg : pos = 2.3 : 1.0 drinking = True neg : pos = 2.3 : 1.0 teacher = True pos : neg = 2.3 : 1.0 portrays = True pos : neg = 2.3 : 1.0 cheesy = True neg : pos = 2.3 : 1.0 flubber = True neg : pos = 2.2 : 1.0 horribly = True neg : pos = 2.2 : 1.0 war = True pos : neg = 2.2 : 1.0 share = True pos : neg = 2.2 : 1.0 hilarious = True pos : neg = 2.2 : 1.0 fake = True neg : pos = 2.2 : 1.0 jordan = True pos : neg = 2.2 : 1.0 mcgregor = True pos : neg = 2.2 : 1.0 independent = True pos : neg = 2.2 : 1.0 paulie = True pos : neg = 2.2 : 1.0 fortunately = True pos : neg = 2.2 : 1.0 visually = True pos : neg = 2.2 : 1.0 oscar = True pos : neg = 2.2 : 1.0 stewart = True pos : neg = 2.2 : 1.0 howard = True pos : neg = 2.2 : 1.0 vincent = True pos : neg = 2.2 : 1.0 squad = True neg : pos = 2.2 : 1.0 ross = True neg : pos = 2.2 : 1.0 thompson = True neg : pos = 2.2 : 1.0 visual = True pos : neg = 2.2 : 1.0 8 = True pos : neg = 2.2 : 1.0 naked = True neg : pos = 2.2 : 1.0 personal = True pos : neg = 2.2 : 1.0 deeply = True pos : neg = 2.2 : 1.0 perfection = True pos : neg = 2.2 : 1.0 kilmer = True neg : pos = 2.2 : 1.0 gabriel = True neg : pos = 2.2 : 1.0 sorry = True neg : pos = 2.2 : 1.0 guilty = True neg : pos = 2.2 : 1.0 predictable = True neg : pos = 2.2 : 1.0 gag = True neg : pos = 2.2 : 1.0 yeah = True neg : pos = 2.2 : 1.0 cliched = True neg : pos = 2.2 : 1.0 sport = True neg : pos = 2.2 : 1.0 dazzle = True pos : neg = 2.2 : 1.0 universal = True pos : neg = 2.2 : 1.0 shakespeare = True pos : neg = 2.2 : 1.0 batman = True neg : pos = 2.2 : 1.0 gordon = True neg : pos = 2.2 : 1.0 brilliant = True pos : neg = 2.2 : 1.0 plant = True neg : pos = 2.2 : 1.0 clerk = True neg : pos = 2.2 : 1.0 natasha = True neg : pos = 2.2 : 1.0 watson = True pos : neg = 2.2 : 1.0 thankfully = True pos : neg = 2.2 : 1.0 phil = True neg : pos = 2.2 : 1.0 straightforward = True pos : neg = 2.2 : 1.0 correct = True pos : neg = 2.2 : 1.0 ford = True pos : neg = 2.2 : 1.0 painting = True pos : neg = 2.2 : 1.0 pack = True pos : neg = 2.2 : 1.0 portray = True pos : neg = 2.2 : 1.0 passion = True pos : neg = 2.2 : 1.0 cable = True neg : pos = 2.2 : 1.0 profanity = True neg : pos = 2.2 : 1.0 animation = True pos : neg = 2.2 : 1.0 range = True pos : neg = 2.2 : 1.0 edge = True pos : neg = 2.2 : 1.0 absurd = True neg : pos = 2.1 : 1.0 devil = True neg : pos = 2.1 : 1.0 gratuitous = True neg : pos = 2.1 : 1.0 obnoxious = True neg : pos = 2.1 : 1.0 expert = True neg : pos = 2.1 : 1.0 emotionally = True pos : neg = 2.1 : 1.0 doom = True pos : neg = 2.1 : 1.0 disappointed = True pos : neg = 2.1 : 1.0 definitely = True pos : neg = 2.1 : 1.0 con = True neg : pos = 2.1 : 1.0 variety = True pos : neg = 2.1 : 1.0 remake = True neg : pos = 2.1 : 1.0 beauty = True pos : neg = 2.1 : 1.0 neo = True pos : neg = 2.1 : 1.0 carrie = True pos : neg = 2.1 : 1.0 none = True neg : pos = 2.1 : 1.0 others = True pos : neg = 2.1 : 1.0 homage = True pos : neg = 2.1 : 1.0 robocop = True pos : neg = 2.1 : 1.0 ripley = True pos : neg = 2.1 : 1.0 empire = True pos : neg = 2.1 : 1.0 strain = True pos : neg = 2.1 : 1.0 quentin = True pos : neg = 2.1 : 1.0 frank = True pos : neg = 2.1 : 1.0 craft = True pos : neg = 2.1 : 1.0 journey = True pos : neg = 2.1 : 1.0 bunch = True neg : pos = 2.1 : 1.0 desire = True pos : neg = 2.1 : 1.0 unlike = True pos : neg = 2.1 : 1.0 pathetic = True neg : pos = 2.1 : 1.0 collect = True pos : neg = 2.1 : 1.0 eager = True pos : neg = 2.1 : 1.0 powerful = True pos : neg = 2.1 : 1.0 tradition = True pos : neg = 2.1 : 1.0 modern = True pos : neg = 2.1 : 1.0 worker = True pos : neg = 2.1 : 1.0 condition = True pos : neg = 2.1 : 1.0 irritate = True neg : pos = 2.1 : 1.0 rocky = True pos : neg = 2.1 : 1.0 river = True pos : neg = 2.1 : 1.0 redeem = True neg : pos = 2.1 : 1.0 loser = True neg : pos = 2.1 : 1.0 corny = True neg : pos = 2.0 : 1.0 halloween = True neg : pos = 2.0 : 1.0 blair = True neg : pos = 2.0 : 1.0 spice = True neg : pos = 2.0 : 1.0 diamond = True neg : pos = 2.0 : 1.0 arnold = True neg : pos = 2.0 : 1.0 spacey = True pos : neg = 2.0 : 1.0 reflect = True pos : neg = 2.0 : 1.0 brilliantly = True pos : neg = 2.0 : 1.0 spoken = True pos : neg = 2.0 : 1.0 tour = True pos : neg = 2.0 : 1.0 festival = True pos : neg = 2.0 : 1.0 oppose = True pos : neg = 2.0 : 1.0 split = True pos : neg = 2.0 : 1.0 blame = True neg : pos = 2.0 : 1.0 guess = True neg : pos = 2.0 : 1.0 erotic = True neg : pos = 2.0 : 1.0 disappoint = True neg : pos = 2.0 : 1.0 intense = True pos : neg = 2.0 : 1.0 remains = True pos : neg = 2.0 : 1.0 today = True pos : neg = 2.0 : 1.0 troubled = True pos : neg = 2.0 : 1.0 update = True neg : pos = 2.0 : 1.0 amanda = True neg : pos = 2.0 : 1.0 failure = True neg : pos = 2.0 : 1.0 compelling = True pos : neg = 2.0 : 1.0 identify = True pos : neg = 2.0 : 1.0 develops = True pos : neg = 2.0 : 1.0 threat = True pos : neg = 2.0 : 1.0 prisoner = True pos : neg = 2.0 : 1.0 cousin = True neg : pos = 2.0 : 1.0 meyer = True neg : pos = 2.0 : 1.0 showgirl = True neg : pos = 2.0 : 1.0 culture = True pos : neg = 2.0 : 1.0 fully = True pos : neg = 2.0 : 1.0 trap = True neg : pos = 2.0 : 1.0 disappointment = True neg : pos = 2.0 : 1.0 tragedy = True pos : neg = 2.0 : 1.0 perspective = True pos : neg = 2.0 : 1.0 equal = True pos : neg = 2.0 : 1.0 carol = True pos : neg = 2.0 : 1.0 cave = True neg : pos = 2.0 : 1.0 wrestling = True neg : pos = 2.0 : 1.0 paltrow = True neg : pos = 2.0 : 1.0 loud = True neg : pos = 2.0 : 1.0 bomb = True neg : pos = 2.0 : 1.0 suffers = True neg : pos = 2.0 : 1.0 flaw = True pos : neg = 2.0 : 1.0 austin = True pos : neg = 2.0 : 1.0 richards = True pos : neg = 2.0 : 1.0 driver = True pos : neg = 2.0 : 1.0 francis = True pos : neg = 2.0 : 1.0 interview = True pos : neg = 2.0 : 1.0 poor = True neg : pos = 2.0 : 1.0 subplots = True neg : pos = 2.0 : 1.0 honest = True pos : neg = 2.0 : 1.0 matt = True pos : neg = 2.0 : 1.0 realizes = True pos : neg = 2.0 : 1.0 palma = True neg : pos = 2.0 : 1.0 henstridge = True neg : pos = 2.0 : 1.0 warm = True pos : neg = 2.0 : 1.0 witty = True pos : neg = 2.0 : 1.0 fiennes = True pos : neg = 2.0 : 1.0 neve = True pos : neg = 2.0 : 1.0 grand = True pos : neg = 2.0 : 1.0 trite = True neg : pos = 2.0 : 1.0 grade = True neg : pos = 2.0 : 1.0 ethan = True pos : neg = 2.0 : 1.0 narrator = True pos : neg = 2.0 : 1.0 america = True pos : neg = 2.0 : 1.0 barely = True neg : pos = 2.0 : 1.0 ad = True neg : pos = 2.0 : 1.0 astonish = True pos : neg = 2.0 : 1.0 spell = True pos : neg = 2.0 : 1.0 complain = True pos : neg = 2.0 : 1.0 directs = True pos : neg = 2.0 : 1.0 deny = True pos : neg = 2.0 : 1.0 pat = True pos : neg = 2.0 : 1.0 crisis = True pos : neg = 2.0 : 1.0 irony = True pos : neg = 2.0 : 1.0 crucial = True pos : neg = 2.0 : 1.0 convict = True pos : neg = 2.0 : 1.0 anymore = True pos : neg = 2.0 : 1.0 fifth = True neg : pos = 1.9 : 1.0 hey = True neg : pos = 1.9 : 1.0 sub = True neg : pos = 1.9 : 1.0 8mm = True neg : pos = 1.9 : 1.0 jackal = True neg : pos = 1.9 : 1.0 commentary = True pos : neg = 1.9 : 1.0 silver = True pos : neg = 1.9 : 1.0 maybe = True neg : pos = 1.9 : 1.0 blow = True neg : pos = 1.9 : 1.0 connect = True pos : neg = 1.9 : 1.0 flow = True pos : neg = 1.9 : 1.0 class = True pos : neg = 1.9 : 1.0 cameron = True pos : neg = 1.9 : 1.0 gift = True pos : neg = 1.9 : 1.0 true = True pos : neg = 1.9 : 1.0 knowledge = True pos : neg = 1.9 : 1.0 willing = True pos : neg = 1.9 : 1.0 wannabe = True neg : pos = 1.9 : 1.0 academy = True pos : neg = 1.9 : 1.0 7 = True pos : neg = 1.9 : 1.0 structure = True pos : neg = 1.9 : 1.0 queen = True pos : neg = 1.9 : 1.0 empty = True neg : pos = 1.9 : 1.0 disturb = True pos : neg = 1.9 : 1.0 moral = True pos : neg = 1.9 : 1.0 . clf.classify_many([tup[0] for tup in testing_data]) . [&#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;pos&#39;, &#39;neg&#39;, &#39;neg&#39;] .",
            "url": "https://byteshiva.github.io/blog/ntlk/jupyter/python/movie-review/natual%20language%20processing/2020/03/18/Movie-Review-Data-Analysis.html",
            "relUrl": "/ntlk/jupyter/python/movie-review/natual%20language%20processing/2020/03/18/Movie-Review-Data-Analysis.html",
            "date": " • Mar 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Face Recognition KickStarter",
            "content": "!pip3 install opencv-python . Collecting opencv-python Downloading opencv_python-4.2.0.32-cp38-cp38-manylinux1_x86_64.whl (28.2 MB) |████████████████████████████████| 28.2 MB 2.1 MB/s eta 0:00:01 Requirement already satisfied: numpy&gt;=1.17.3 in /home/siva/.asdf/installs/python/3.8.0/lib/python3.8/site-packages (from opencv-python) (1.18.1) Installing collected packages: opencv-python Successfully installed opencv-python-4.2.0.32 . !pip3 install face_recognition . %pylab inline import face_recognition import cv2 import matplotlib.patches as patches from IPython.display import clear_output from matplotlib.pyplot import imshow import matplotlib.pylab as plt . Populating the interactive namespace from numpy and matplotlib . # Loading video for face detection video_capture = cv2.VideoCapture(&quot;my_videos/hamilton_clip.mp4&quot;) frame_count = 0 while video_capture.isOpened(): # Grab a single frame of video ret, frame = video_capture.read() # Bail out when the video file ends if not ret: video_capture.release() break # We will search face in every 15 frames to speed up process. frame_count += 1 if frame_count % 15 == 0: frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # Display video frame title(&quot;Input Stream&quot;) plt.imshow(frame) # Find all the faces and face encodings in the current frame of video rgb_frame = frame[:, :, ::-1] face_locations = face_recognition.face_locations(rgb_frame) # If faces were found, we will mark it on frame with blue dots for face_location in face_locations: plt.plot(face_location[1], face_location[0], &#39;bo&#39;) plt.plot(face_location[1], face_location[2], &#39;bo&#39;) plt.plot(face_location[3], face_location[2], &#39;bo&#39;) plt.plot(face_location[3], face_location[0], &#39;bo&#39;) # Show frame... plt.show() # ... and hold it until a new frame appears clear_output(wait=True) .",
            "url": "https://byteshiva.github.io/blog/face-api/jupyter/python/2020/03/02/Face-Recongnition-Intro.html",
            "relUrl": "/face-api/jupyter/python/2020/03/02/Face-Recongnition-Intro.html",
            "date": " • Mar 2, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Face Recognition Example",
            "content": "Find faces in pictures . We start by loading an example picture using Python imaging library. Go ahead and run the cell bellow to see the image. . from PIL import Image, ImageDraw from IPython.display import display # The program we will be finding faces on the example below pil_im = Image.open(&#39;my_images/two_people.jpg&#39;) display(pil_im) . Learning from example . Now we show the library two different faces (Joe Biden, Barack Obama) and generate the encodings for them. Encoding is simply a low dimensional representation of a face that can be easily compared with other faces the library will recognize in the future. . import face_recognition import numpy as np from PIL import Image, ImageDraw from IPython.display import display # This is an example of running face recognition on a single image # and drawing a box around each person that was identified. # Load a sample picture and learn how to recognize it. obama_image = face_recognition.load_image_file(&quot;my_images/obama.jpg&quot;) obama_face_encoding = face_recognition.face_encodings(obama_image)[0] # Load a second sample picture and learn how to recognize it. biden_image = face_recognition.load_image_file(&quot;my_images/biden.jpg&quot;) biden_face_encoding = face_recognition.face_encodings(biden_image)[0] # Create arrays of known face encodings and their names known_face_encodings = [ obama_face_encoding, biden_face_encoding ] known_face_names = [ &quot;Barack Obama..&quot;, &quot;Joe Biden..&quot; ] print(&#39;Learned encoding for&#39;, len(known_face_encodings), &#39;images.&#39;) . Learned encoding for 2 images. . Showtime . Finally, we load the image we looked at in the first cell, find the faces in the image and compare them with the encodings the library generated in the previous step. We can see that library now correctly recognizes Barack and Joe in the input. . # Load an image with an unknown face unknown_image = face_recognition.load_image_file(&quot;my_images/two_people.jpg&quot;) # Find all the faces and face encodings in the unknown image face_locations = face_recognition.face_locations(unknown_image) face_encodings = face_recognition.face_encodings(unknown_image, face_locations) # Convert the image to a PIL-format image so that we can draw on top of it with the Pillow library # See http://pillow.readthedocs.io/ for more about PIL/Pillow pil_image = Image.fromarray(unknown_image) # Create a Pillow ImageDraw Draw instance to draw with draw = ImageDraw.Draw(pil_image) # Loop through each face found in the unknown image for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings): # See if the face is a match for the known face(s) matches = face_recognition.compare_faces(known_face_encodings, face_encoding) name = &quot;Unknown&quot; # Or instead, use the known face with the smallest distance to the new face face_distances = face_recognition.face_distance(known_face_encodings, face_encoding) best_match_index = np.argmin(face_distances) if matches[best_match_index]: name = known_face_names[best_match_index] # Draw a box around the face using the Pillow module draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255)) # Draw a label with a name below the face text_width, text_height = draw.textsize(name) draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255)) draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255)) # Remove the drawing library from memory as per the Pillow docs del draw # Display the resulting image display(pil_image) . Ref: . https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/ | https://beta.deepnote.com/profile/d8e472ff-097c-4932-8ac5-850cfe8aaf86 |",
            "url": "https://byteshiva.github.io/blog/face-api/jupyter/python/2020/03/02/Face-Reconginition-Example.html",
            "relUrl": "/face-api/jupyter/python/2020/03/02/Face-Reconginition-Example.html",
            "date": " • Mar 2, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Rust Notebook KickStarter",
            "content": "(1..13).map(fib).collect::&lt;Vec&lt;i32&gt;&gt;() . [2, 2, 4, 6, 10, 16, 26, 42, 68, 110, 178, 288] . let values = (1..13).map(fib).collect::&lt;Vec&lt;i32&gt;&gt;(); values . [2, 2, 4, 6, 10, 16, 26, 42, 68, 110, 178, 288] . use std::sync::{Mutex, Arc}; let counter = Arc::new(Mutex::new(0i32)); std::thread::spawn({ let counter = Arc::clone(&amp;counter); move || { for i in 1..300 { *counter.lock().unwrap() += 1; std::thread::sleep(std::time::Duration::from_millis(100)); } }}); . *counter.lock()? . 209 . *counter.lock()? . 288 . *counter.lock()? . 299 . :dep base64 = &quot;0.10.1&quot; base64::encode(&amp;vec![1, 2, 3, 4]) . &#34;AQIDBA==&#34; . pub fn fib(x: i32) -&gt; i32 { if x &lt;= 2 {2} else {fib(x - 2) + fib(x - 1)} } . use std::fmt::Debug; pub struct Matrix&lt;T&gt; {pub values: Vec&lt;T&gt;, pub row_size: usize} impl&lt;T: Debug&gt; Matrix&lt;T&gt; { pub fn evcxr_display(&amp;self) { let mut html = String::new(); html.push_str(&quot;&lt;table&gt;&quot;); for r in 0..(self.values.len() / self.row_size) { html.push_str(&quot;&lt;tr&gt;&quot;); for c in 0..self.row_size { html.push_str(&quot;&lt;td&gt;&quot;); html.push_str(&amp;format!(&quot;{:?}&quot;, self.values[r * self.row_size + c])); html.push_str(&quot;&lt;/td&gt;&quot;); } html.push_str(&quot;&lt;/tr&gt;&quot;); } html.push_str(&quot;&lt;/table&gt;&quot;); println!(&quot;EVCXR_BEGIN_CONTENT text/html n{} nEVCXR_END_CONTENT&quot;, html); } } . let m = Matrix {values: vec![1,2,3,4,5,6,7,8,9], row_size: 3}; m . 1 | 2 | 3 | . 4 | 5 | 6 | . 7 | 8 | 9 | . extern crate image; extern crate base64; pub trait EvcxrResult {fn evcxr_display(&amp;self);} impl EvcxrResult for image::RgbImage { fn evcxr_display(&amp;self) { let mut buffer = Vec::new(); image::png::PNGEncoder::new(&amp;mut buffer).encode(&amp;**self, self.width(), self.height(), image::ColorType::RGB(8)).unwrap(); let img = base64::encode(&amp;buffer); println!(&quot;EVCXR_BEGIN_CONTENT image/png n{} nEVCXR_END_CONTENT&quot;, img); } } impl EvcxrResult for image::GrayImage { fn evcxr_display(&amp;self) { let mut buffer = Vec::new(); image::png::PNGEncoder::new(&amp;mut buffer).encode(&amp;**self, self.width(), self.height(), image::ColorType::Gray(8)).unwrap(); let img = base64::encode(&amp;buffer); println!(&quot;EVCXR_BEGIN_CONTENT image/png n{} nEVCXR_END_CONTENT&quot;, img); } } . image::ColorType::RGB(8)).unwrap(); ^^^ variant or associated item not found in `image::ColorType` no variant or associated item named `RGB` found for type `image::ColorType` in the current scope . image::ColorType::Gray(8)).unwrap(); ^^^^ variant or associated item not found in `image::ColorType` no variant or associated item named `Gray` found for type `image::ColorType` in the current scope . image::ImageBuffer::from_fn(256, 256, |x, y| { if (x as i32 - y as i32).abs() &lt; 3 { image::Rgb([0, 0, 255]) } else { image::Rgb([0, 0, 0]) } }) . :dep tokio = {version = &quot;0.2&quot;, features = [&quot;full&quot;]} . let mut stream : tokio::net::TcpStream = tokio::net::TcpStream::connect(&quot;127.0.0.1:99999&quot;).await?; . invalid port value . let mut stream : tokio::net::TcpStream = tokio::net::TcpStream::connect(&quot;127.0.0.1:6573&quot;).await?; . Connection refused (os error 111) . use tokio::io::AsyncWriteExt; stream.write(b&quot;Hello, world! n&quot;).await?; . stream.write(b&#34;Hello, world! n&#34;).await?; ^^^^^^ not found in this scope cannot find value `stream` in this scope . :vars . VariableType . m | Matrix&lt;i32&gt; | counter | std::sync::Arc&lt;std::sync::Mutex&lt;i32&gt;&gt; | values | std::vec::Vec&lt;i32&gt; | &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; :help . :vars List bound variables and their types :opt [level] Toggle/set optimization level :fmt [format] Set output formatter (default: {:?}). :efmt [format] Set the formatter for errors returned by ? :explain Print explanation of last error :clear Clear all state, keeping compilation cache :dep Add dependency. e.g. :dep regex = &#34;1.0&#34; :sccache [0|1] Set whether to use sccache. :linker [linker] Set/print linker. Supported: system, lld :version Print Evcxr version :preserve_vars_on_panic [0|1] Try to keep vars on panic Mostly for development / debugging purposes: :last_compile_dir Print the directory in which we last compiled :timing Toggle printing of how long evaluations take :last_error_json Print the last compilation error as JSON (for debugging) :time_passes Toggle printing of rustc pass times (requires nightly) :internal_debug Toggle various internal debugging code . let _immutable_binding = 1; let mut mutable_binding = 1; println!(&quot;Before mutation: {}&quot;, mutable_binding); // Ok mutable_binding += 1; println!(&quot;After mutation: {}&quot;, mutable_binding); _immutable_binding += 1; . let _immutable_binding = 1; ^^^^^^^^^^^^^^^^^^ first assignment to `_immutable_binding` _immutable_binding += 1; ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable cannot assign twice to immutable variable `_immutable_binding` . &lt;/div&gt; .",
            "url": "https://byteshiva.github.io/blog/rust/jupyter/2020/03/01/Rust-KickStarter.html",
            "relUrl": "/rust/jupyter/2020/03/01/Rust-KickStarter.html",
            "date": " • Mar 1, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Diagram as Code",
            "content": "from diagrams import Diagram from diagrams.aws.compute import EC2 with Diagram(&quot;Simple Diagram&quot;) as diag: EC2(&quot;web&quot;) diag . pip install diagrams . Collecting diagrams Downloading https://files.pythonhosted.org/packages/59/41/24fbab973c1449faefd09a3197cb11311971df6db05ade2d15d554b7d8ef/diagrams-0.6.3-py3-none-any.whl (8.8MB) |████████████████████████████████| 8.8MB 2.5MB/s Collecting contextvars&lt;3.0,&gt;=2.4; python_version &gt;= &#34;3.6&#34; and python_version &lt; &#34;3.7&#34; Downloading https://files.pythonhosted.org/packages/83/96/55b82d9f13763be9d672622e1b8106c85acb83edd7cc2fa5bc67cd9877e9/contextvars-2.4.tar.gz Collecting graphviz&lt;0.14.0,&gt;=0.13.2 Downloading https://files.pythonhosted.org/packages/f5/74/dbed754c0abd63768d3a7a7b472da35b08ac442cf87d73d5850a6f32391e/graphviz-0.13.2-py2.py3-none-any.whl Requirement already satisfied: jinja2&lt;3.0,&gt;=2.10 in /usr/local/lib/python3.6/dist-packages (from diagrams) (2.11.1) Collecting immutables&gt;=0.9 Downloading https://files.pythonhosted.org/packages/62/cc/3961b18a1a689a7e3232d923a8546cb901c49b4a33be6987c03a89175c4f/immutables-0.11-cp36-cp36m-manylinux1_x86_64.whl (92kB) |████████████████████████████████| 102kB 6.6MB/s Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/local/lib/python3.6/dist-packages (from jinja2&lt;3.0,&gt;=2.10-&gt;diagrams) (1.1.1) Building wheels for collected packages: contextvars Building wheel for contextvars (setup.py) ... done Created wheel for contextvars: filename=contextvars-2.4-cp36-none-any.whl size=7666 sha256=c200628de2974404757d0f52fff9f5fedc667bb391a842d8e356f0bc2748bcc8 Stored in directory: /root/.cache/pip/wheels/a5/7d/68/1ebae2668bda2228686e3c1cf16f2c2384cea6e9334ad5f6de Successfully built contextvars Installing collected packages: immutables, contextvars, graphviz, diagrams Found existing installation: graphviz 0.10.1 Uninstalling graphviz-0.10.1: Successfully uninstalled graphviz-0.10.1 Successfully installed contextvars-2.4 diagrams-0.6.3 graphviz-0.13.2 immutables-0.11 . from diagrams import Cluster, Diagram from diagrams.aws.compute import ECS from diagrams.aws.database import ElastiCache, RDS from diagrams.aws.network import ELB from diagrams.aws.network import Route53 with Diagram(&quot;Clustered Web Services&quot;, show=False) as diag_clus_webservices: dns = Route53(&quot;dns&quot;) lb = ELB(&quot;lb&quot;) with Cluster(&quot;Services&quot;): svc_group = [ECS(&quot;web1&quot;), ECS(&quot;web2&quot;), ECS(&quot;web3&quot;)] with Cluster(&quot;DB Cluster&quot;): db_master = RDS(&quot;userdb&quot;) db_master - [RDS(&quot;userdb ro&quot;)] memcached = ElastiCache(&quot;memcached&quot;) dns &gt;&gt; lb &gt;&gt; svc_group svc_group &gt;&gt; db_master svc_group &gt;&gt; memcached diag_clus_webservices . from diagrams import Cluster, Diagram from diagrams.aws.compute import ECS, EKS, Lambda from diagrams.aws.database import Redshift from diagrams.aws.integration import SQS from diagrams.aws.storage import S3 with Diagram(&quot;Event Processing&quot;, show=False) as Event_Processing_on_AWS: source = EKS(&quot;k8s source&quot;) with Cluster(&quot;Event Flows&quot;): with Cluster(&quot;Event Workers&quot;): workers = [ECS(&quot;worker1&quot;), ECS(&quot;worker2&quot;), ECS(&quot;worker3&quot;)] queue = SQS(&quot;event queue&quot;) with Cluster(&quot;Processing&quot;): handlers = [Lambda(&quot;proc1&quot;), Lambda(&quot;proc2&quot;), Lambda(&quot;proc3&quot;)] store = S3(&quot;events store&quot;) dw = Redshift(&quot;analytics&quot;) source &gt;&gt; workers &gt;&gt; queue &gt;&gt; handlers handlers &gt;&gt; store handlers &gt;&gt; dw Event_Processing_on_AWS . from diagrams import Cluster, Diagram from diagrams.gcp.analytics import BigQuery, Dataflow, PubSub from diagrams.gcp.compute import AppEngine, Functions from diagrams.gcp.database import BigTable from diagrams.gcp.iot import IotCore from diagrams.gcp.storage import GCS with Diagram(&quot;Message Collecting&quot;, show=False) as Message_Collecting_System_on_GCP: pubsub = PubSub(&quot;pubsub&quot;) with Cluster(&quot;Source of Data&quot;): [IotCore(&quot;core1&quot;), IotCore(&quot;core2&quot;), IotCore(&quot;core3&quot;)] &gt;&gt; pubsub with Cluster(&quot;Targets&quot;): with Cluster(&quot;Data Flow&quot;): flow = Dataflow(&quot;data flow&quot;) with Cluster(&quot;Data Lake&quot;): flow &gt;&gt; [BigQuery(&quot;bq&quot;), GCS(&quot;storage&quot;)] with Cluster(&quot;Event Driven&quot;): with Cluster(&quot;Processing&quot;): flow &gt;&gt; AppEngine(&quot;engine&quot;) &gt;&gt; BigTable(&quot;bigtable&quot;) with Cluster(&quot;Serverless&quot;): flow &gt;&gt; Functions(&quot;func&quot;) &gt;&gt; AppEngine(&quot;appengine&quot;) pubsub &gt;&gt; flow Message_Collecting_System_on_GCP . from diagrams import Cluster, Diagram from diagrams.onprem.analytics import Spark from diagrams.onprem.compute import Server from diagrams.onprem.database import PostgreSQL from diagrams.onprem.inmemory import Redis from diagrams.onprem.logging import Fluentd from diagrams.onprem.monitoring import Grafana, Prometheus from diagrams.onprem.network import Nginx from diagrams.onprem.queue import Kafka with Diagram(&quot;Advanced Web Service with On-Premise&quot;, show=False) as Advanced_Web_Service_with_On_Premise: ingress = Nginx(&quot;ingress&quot;) metrics = Prometheus(&quot;metric&quot;) metrics &lt;&lt; Grafana(&quot;monitoring&quot;) with Cluster(&quot;Service Cluster&quot;): grpcsvc = [ Server(&quot;grpc1&quot;), Server(&quot;grpc2&quot;), Server(&quot;grpc3&quot;)] with Cluster(&quot;Sessions HA&quot;): master = Redis(&quot;session&quot;) master - Redis(&quot;replica&quot;) &lt;&lt; metrics grpcsvc &gt;&gt; master with Cluster(&quot;Database HA&quot;): master = PostgreSQL(&quot;users&quot;) master - PostgreSQL(&quot;slave&quot;) &lt;&lt; metrics grpcsvc &gt;&gt; master aggregator = Fluentd(&quot;logging&quot;) aggregator &gt;&gt; Kafka(&quot;stream&quot;) &gt;&gt; Spark(&quot;analytics&quot;) ingress &gt;&gt; grpcsvc &gt;&gt; aggregator Advanced_Web_Service_with_On_Premise . from urllib.request import urlretrieve from diagrams import Cluster, Diagram from diagrams.custom import Custom from diagrams.aws.database import Aurora from diagrams.k8s.compute import Pod # Download an image to be used into a Custom Node class rabbitmq_url = &quot;https://jpadilla.github.io/rabbitmqapp/assets/img/icon.png&quot; rabbitmq_icon = &quot;rabbitmq.png&quot; urlretrieve(rabbitmq_url, rabbitmq_icon) with Diagram(&quot;Broker Consumers&quot;, show=False) as RabbitMQ_Consumers_with_Custom_Nodes: with Cluster(&quot;Consumers&quot;): consumers = [ Pod(&quot;worker&quot;), Pod(&quot;worker&quot;), Pod(&quot;worker&quot;) ] queue = Custom(&quot;Message queue&quot;, rabbitmq_icon) queue &gt;&gt; consumers &gt;&gt; Aurora(&quot;Database&quot;) RabbitMQ_Consumers_with_Custom_Nodes . Reference : . https://diagrams.mingrammer.com/ . How to run jupyter notebook locally . $ git clone &lt;&lt;path-to-github&gt;&gt; $ pip install jupyterlab $ jupyter lab .",
            "url": "https://byteshiva.github.io/blog/diagram/jupyter/code/diagram_as_code/2020/02/27/Diagram-as-Code.html",
            "relUrl": "/diagram/jupyter/code/diagram_as_code/2020/02/27/Diagram-as-Code.html",
            "date": " • Feb 27, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides has for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Feautures . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://byteshiva.github.io/blog/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://byteshiva.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://byteshiva.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "404 . Page not found :( . The requested page could not be found. .",
          "url": "https://byteshiva.github.io/blog/404.html",
          "relUrl": "/404.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://byteshiva.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://byteshiva.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}